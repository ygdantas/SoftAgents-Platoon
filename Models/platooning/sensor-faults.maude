
fmod SENSOR-FAULTS is
  inc FAULT-MODEL .
  inc MODEL-KNOWLEDGE .
 

  vars t t0 t1 t2 t3 t4 t5 t6 : Time .
  var n i j j0 j1 n0 n1 e e0 e1 e2 : Nat .
  vars x y x1 y1 x0 y0 xll xur yll yur i0 i1 i2 sgn : Int .
  vars id id0 id1 : Id .
	var cl : Class .
  vars l l0 l1 l2 l3 loc dl0 dl1 : Loc .
  vars ekb ekb0 ekb1 kb  lkb kb1 lkb0 kb0 kb2 :  KB .
  vars  ff ff0 ff1 fp fp0 fp1 fp2 fp3 fp4 rp0 rp1 rp2 ff2 ff3 : Rat .
	vars act act0 act1 : Action .
  var ff?  : [Rat] .
  var ftype : FType .
  var fpars : FPars .
  var sen : Sensor .



**** Sensor faults
op sF : Id Sensor FType FPars -> Info .

op getSF : Id Sensor KB -> KB .
eq getSF(id,sen,(sF(id,sen,ftype,fpars) @ t) kb) = 
             (sF(id,sen,ftype,fpars) @ t)  .
eq getSF(id,sen, kb) = none [owise] .

***(
gap sensor fault
spd sensor fault
loc sensor fault

***(
The effect of the fault models is defined by the function
readSensor, which calls applySensorF  (in knowledge.maude)
)***
**** veh 0 location sensor is broken w prob .1 and offsets +/-4 w prob .2
 (sF(v(0),locS,simpleFT,sFP(1/10,1/5, ffV(4))) @ 0) .

**** veh 1 gap sensor is broken w prob .1 and offsets +/- 3   w prob .2
 (sF(v(1),gapS,simpleFT,sFP(1/10,1/5, ffV(3))) @ 0) .

)

*********** reading sensors
*** op readSensors : Id SensorSet KB -> KBPair .
op readSensorsX : Id SensorSet KB KB -> KBPair .

eq readSensors(id,ss:SensorSet,ekb) =
     readSensorsX(id,ss:SensorSet,ekb,none) .
eq readSensorsX(id,none,ekb,kb)  = {kb,ekb} .
ceq readSensorsX(id,s:Sensor ss:SensorSet,ekb,kb) =
      readSensorsX(id, ss:SensorSet,ekb0,addK(kb,kb0))
if {kb0,ekb0} := readSensor(id,s:Sensor,ekb) .

--- (sensor item or none) 
op getSensorKI : Id Sensor KB -> KB . 

--- sensorKB (after fault adjustment), updated Ekb
op readSensor : Id Sensor KB -> KBPair . 

***(
eq readSensor(id,s:Sensor,kb) =
      {getSensorKI(id,s:Sensor,kb),kb} .
)

ceq readSensor(id,s:Sensor,ekb) =
    (if kb1 == none 
    then {kb0,ekb} 
    else applySensorF(id,s:Sensor,kb0,kb1,ekb) fi)
if kb0 := getSensorKI(id,s:Sensor,ekb)
/\ kb1 := getSF(id,s:Sensor,ekb)
.

eq getSensorKI(id,locS, (atloc(id,l) @ t) kb) 
     = (atloc(id,l) @ t) .
eq getSensorKI(id,speedS, (speed(id,ff) @ t) kb) 
     = (speed(id,ff) @ t) .

*** undefined if no vehicle in front
op computeGap : Id KB ~> Rat .
ceq computeGap(id,kb 
       (atloc(id,loc(ff)) @ t1)
      (atloc(id1,loc(ff3)) @ t2)) 
 = computeGap$(id,kb 
       (atloc(id,loc(ff)) @ t1),ff0)
 if ff0 := ff3 - ff
 /\ ff0 > 0 . 

op computeGap$ : Id KB Rat -> Rat .
ceq computeGap$(id,kb
      (atloc(id,loc(ff)) @ t1)
      (atloc(id1,loc(ff3)) @ t2),ff2)
 = computeGap$(id,kb
      (atloc(id,loc(ff)) @ t1),ff0)
 if ff0 := ff3 - ff 
 /\ ff0 > 0
 /\ ff0 < ff2 .
 
 eq computeGap$(id,kb,ff0) = ff0 [owise] .

ceq getSensorKI(id,gapS,kb clock(t)) 
     = if ff? :: Rat then 
        (gapNext(id,ff?) @ t) 
       else none fi 
if ff? := computeGap(id,kb clock(t)) .

eq getSensorKI(id,vehS,kb) 
     = getVehLoc(kb,none) .
op getVehLoc : KB KB -> KB .
eq getVehLoc(kb atloc(id,l) @ t,kb0)
 = getVehLoc(kb,kb0 atloc(id,l) @ t) .
eq getVehLoc(kb,kb0) = kb0 [owise] .

eq getSensorKI(id,s:Sensor, kb) = none [owise] .

***(
op getSensorsKI : Id SensorSet KB -> KB .
eq getSensorsKI(id,s:Sensor sset:SensorSet,ekb) =
   (getSensorKI(id,s:Sensor,ekb)  getSensorsKI(id,sset:SensorSet,ekb)) .
eq getSensorsKI(id,(none).SensorSet,ekb) = (none).KB .
)

****                       sget fault ekb
op applySensorF : Id Sensor KB KB KB -> KBPair .
ceq applySensorF(id,locS,atloc(id,l) @ t0, 
                 (sF(id,locS,simpleFT,sFP(fp0,fp1,ffV(fp2))) @ t1),
                 (rand(id,i,j) @ t4 ) ekb)
    = {atloc(id,l1) @ t3, ekb  (rand(id,i,s s s j) @ t)}
  if  randInc(n) clock(t) ekb0  := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ rp1 := (random( (n * (j + 1)) + i) / randMax )
  /\ rp2 := (random( (n * (j + 2)) + i) / randMax )
  /\ dl0 := if rp0 < fp0 then loc(0) else l fi
  /\ sgn := if rp2 < 1/2 then -1 else 1 fi
  /\ dl1 := if rp1 < fp1 then loc(sgn * fp2) else loc(0) fi
  /\ l1 := (if (rp0 < fp0) 
            then noLoc 
            else sum(l,dl1) fi) 
  /\ t3 := (if (l1 == l) then t0 else t fi) .

ceq applySensorF(id,speedS,speed(id,ff) @ t0, 
              (sF(id,speedS,simpleFT,sFP(fp0,fp1,ffV(fp2))) @ t1),
              (rand(id,i,j) @ t4 ) ekb)
    = {kb0, ekb  (rand(id,i,s s s j) @ t)}
  if  randInc(n) clock(t) ekb0  := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ rp1 := (random( (n * (j + 1)) + i) / randMax )
  /\ rp2 := (random( (n * (j + 2)) + i) / randMax )
  /\ sgn := if rp2 < 1/2 then -1 else 1 fi
  /\ ff1 := if rp1 < fp1 then ff + (sgn * fp2) else ff fi
  /\ t3 := (if (ff1 == ff) then t0 else t fi) 
  /\ kb0 := 
     (if (rp0 < fp0) then none else (speed(id,ff1) @ t3) fi) .

ceq applySensorF(id,gapS,gapNext(id,fp) @ t0, 
                 (sF(id,gapS,simpleFT,sFP(fp0,fp1,ffV(fp2))) @ t1),
                 (rand(id,i,j) @ t4 ) ekb)
    = {kb0, ekb   (rand(id,i,s s s j) @ t)}
  if  randInc(n) ekb0 clock(t)  := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
****  /\ rp1 := (random( (n * (j + 1)) + i) / randMax )
****  /\ rp2 := (random( (n * (j + 2)) + i) / randMax )
  /\ rp1 := (random( (n * (j + 2)) + i) / randMax )
  /\ rp2 := (random( (n * (j + 1)) + i) / randMax )
  /\ sgn := if rp2 < 1/2 then -1 else 1 fi
  /\ fp3 := if rp1 < fp1 then sgn * fp2 else 0 fi
  /\ fp4 := fp + fp3
  /\ t3 := (if (rp1 < fp1) then t else t0 fi) 
  /\ kb0 := 
      (if (rp0 < fp0) then none else (gapNext(id,fp4) @ t3) fi) .


eq applySensorF(id,s:Sensor,kb0,kb1,ekb) = {kb0, ekb} [owise] .

***(
ceq applySensorF(id,vehS,kb0,
                (sF(id,obstacleS,boolFT,bFP(fp0)) @ t1),
                (rand(id,i,j) @ t4 ) ekb) =
        {kb1, (rand(id,i, s j) @ t)  ekb}
  if (fence(id,ll,ur) @ t2) clock(t) randInc(n)  ekb0
     := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ kb1 := if rp0 < fp0 then none else kb0 fi .
  
)
endfm
